终端 gitv-v查看有没有下载完成
配置：
  name
        git config --global user.name "huahua"
  email
        git config --global user.email "2933537962@qq.com"

使用git：
     git status
        - 查看当前仓库的状态
     git init
        - 初始化仓库

     刚刚添加进项目的状态属于未跟踪状态 Untracked:
        未跟踪 --->暂存(绿色是暂存状态)
           git add <filename> 将文件切换到暂存状态
		   git add * 将所有的已修改或未跟踪的文件暂存
		暂存 ----> 未修改
		   git commit -m "xxx" 将暂存的文件存储到仓库中 (m指message xxx指提交的信息)
		   git commit -a -m "xxx" 提交所有已修改的文件到仓库中(未跟踪的文件不会提交)
		未修改 --->修改
 		   修改代码后，文件会变为修改状态	修改后继续暂存再变为未修改

常用的命令
       1、重置文件
       git restore <filename> 返回上一次的修改内容，重置文件，恢复文件
       git restore --staged <filename> 把文件从暂存的状态取消，但是文件如果不在还是不在

       2、删除文件
       git rm <filename> 删除文件  --> git commit -m "xxx" 从系统里包括仓库里彻底删除
       git rm <filename> -f 强制删除文件(因为如果新添加的内容没有放入库中删除不了但是可以强制删除)删除完要git commit -m "xxx"提交

      3、移动文件
      git mv <filename>  <filename2> 移动文件 重命名文件 (重命名后需要git commit -m "xxx"使改动生效）

分支
     git在存储文件时每一次代码提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录代码的状态的，节点会构成树状结构，
     树状结构意味着这个数会存在分支，默认情况下仓库只有一个分支，命名为master，在使用时可以创建多个分支，分支与分支之间相互独立。
     在一个分支上修改代码时不会影响其他的分支。

     git branch 查看当前分支
     git branch <branch name> 创建新的分支
     git branch -d <branch name> 删除分支 
     git switch <branch name> 切换分支
     git switch -c <branch name> 创建并切换分支

     在开发中，都是在自己的分支上编写代码，代码编写完成后，再将自己的分支合并到主分支中

变基(rebase)
           在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并
           我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部显示出来，这样但该项目比较复杂，开发过程比较波折时，
           我们必须反复的创建合并和删除分支，这样一来将会使得代码的提交记录变得极为混乱

           原理(变基时发生了什么)
           1、当我们发起变基时，git会首先找到两条分支的最近的共同祖先
           2、对比当前的分支对于祖先的历史提交，并且将它们的不同提取出来存储到临时文件中
           3、将当前部分执行目标的基底
           4、以当前基底开始重新执行历史操作
                        变基和imerge对于合并分支来说最终的结果是一样的，但是变基会使得代码的提交记录更整洁更清晰
        
                       注意：大部分情况下和并和变基是可以互换的，但是如果分支已经提交给了远程仓库，这是尽量不要使用变基
   
                       步骤：
                               1、切换到需要变基的分支 git switch "xxx"
			  2、把当前分支变成master git rebase master
			  3、根据提示选择保留哪个再commit提交

远程仓库(remote)
           目前我对于git的操作都是在本地进行的，在开发中显然不能这样，这时我们就需要一个远程的git仓库，远程的git仓库和本地的本质上没有什么区别，
		   不同点是远程的仓库可以别多人同时访问，方便我们协同开发，在实际工作时，git的服务器通常是又公司内部搭建使用或是购买一些私有的git服务器
		   我们学习阶段直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee(码云)

		   将本地库上传到github：
	
		   		git remote add origin https://github.com/huahua-88/git-demo.git
                	     origin是远程库的名字 后面的是仓库的地址
		   		git branch -M main
               		 修改分支的名字为main(这一步不是必须的)
		   		git push -u origin main
			   		 将代码上传到服务器上。(这里的origin和上面的远程库的名字需要对应，这里的main也要和上面的修改分支的名字对应)

		   将本地库上传gitee：
				git remote add gitee https://gitee.com/lihuahua111/git-demo.git
				git push -u gitee "main"

 














